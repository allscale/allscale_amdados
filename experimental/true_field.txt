//-----------------------------------------------------------------------------
// Using model matrix A, the function integrates advection-diffusion equation forward in time
// (x_{t+1} = A * x_{t}) and records all the solutions - state fields. These fields are
// considered as the "true" state of the nature and the source of the "true" observations.
//-----------------------------------------------------------------------------
void ComputeTrueFields(const Configuration & conf)
{
(void)conf; /*
    std::cout << "Computing the observations, a.k.a 'true' density fields" << endl << flush;
    //true_fields = np.zeros((conf.nx, conf.ny, conf.Nt))

    //std::unique_ptr<gnuplot::Gnuplot> gp(new gnuplot::Gnuplot(nullptr, "-background yellow"));
    std::unique_ptr<gnuplot::Gnuplot> gp(new gnuplot::Gnuplot());   // mac os

    // Global grid structures defined for all the subdomains.
    // The difference between subdomains 'curr[i]' and 'state[i]' is that the latter
    // can handle multi-resolution case and communicate with the neighbour subdomains. We copy
    // 'state[i]' to 'curr[i]' on each iteration, do processing and copy it back.

    Grid<DA_matrix_t,2>        B(SubDomGridSize);           // inverse model matrices
    Grid<DA_subfield_t,2>      curr(SubDomGridSize);        // copy of the current subdomain states
    Grid<DA_subfield_t,2>      next(SubDomGridSize);        // copy of the next subdomain states
    Grid<LUdecomposition<SUB_PROBLEM_SIZE>,2> lu(SubDomGridSize);  // objects for LU decomposition
    std::vector<unsigned char> image_buffer;                // temporary buffer
    domain_t                   state(SubDomGridSize);       // states of the density fields
    boundary_grid_t            boundary(SubDomGridSize);    // neighboring boundary vaklues

    // Generate the initial density field.
    InitialField(state, curr, conf);

    // Time integration forward in time.
    for (int t = 0, Nt = conf.asInt("Nt"); t < Nt; ++t) {
        //std::cout << '+' << flush;
        WriteImage(conf, curr, "field", t, image_buffer, true, gp.get());

        const double physical_time = t * conf.asDouble("dt");
        do {
WriteImage(conf, curr, "field", t, image_buffer, false, gp.get());
            //std::cout << '.' << flush;
            pfor(Origin, SubDomGridSize, [&](const point2d_t & idx) {
                MatrixFromAllscale(curr[idx], state[idx].getLayer<L_100m>());

                InverseModelMatrix(B[idx], conf, physical_time);    // compute inverse model matrix
                lu[idx].Init(B[idx]);                               // decompose: B = L * U
                lu[idx].Solve(next[idx], curr[idx]);                // x_{t+1} = B^{-1} * x_{t}
                curr[idx] = next[idx];

                AllscaleFromMatrix(state[idx].getLayer<L_100m>(), next[idx]);
            });
        } while (SchwarzUpdate(conf, boundary,
                                state, physical_time) > conf.asDouble("schwartz_tol"));
    }
    std::cout << endl << endl << endl;
*/
}